name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_target:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test
        
      - name: Run security audit
        run: npm audit --audit-level=high

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check code formatting
        run: |
          # Check if files are properly formatted
          npx prettier --check "**/*.{js,json,md}" || {
            echo "Code formatting issues found. Run 'npx prettier --write .' to fix."
            exit 1
          }

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm test-image:latest --version

  size-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check package size
        run: |
          npx bundlesize --enable-github-checks
        env:
          BUNDLESIZE_GITHUB_TOKEN: ${{ secrets.FINEGRAIN_TOKEN }}

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-licenses: MIT, ISC, Apache-2.0, BSD-2-Clause, BSD-3-Clause

  pr-summary:
    runs-on: ubuntu-latest
    needs: [security-check, test, lint-and-format, docker-build, size-check]
    if: always()
    steps:
      - name: PR Summary
        uses: actions/github-script@v6
        with:
          script: |
            const jobs = [
              { name: 'Security Check', status: '${{ needs.security-check.result }}' },
              { name: 'Tests', status: '${{ needs.test.result }}' },
              { name: 'Lint & Format', status: '${{ needs.lint-and-format.result }}' },
              { name: 'Docker Build', status: '${{ needs.docker-build.result }}' },
              { name: 'Size Check', status: '${{ needs.size-check.result }}' }
            ];
            
            const passed = jobs.filter(job => job.status === 'success').length;
            const total = jobs.length;
            
            const summary = `## PR Check Results üìä\n\n` +
              `**${passed}/${total} checks passed**\n\n` +
              jobs.map(job => {
                const icon = job.status === 'success' ? '‚úÖ' : 
                           job.status === 'failure' ? '‚ùå' : '‚è∏Ô∏è';
                return `${icon} ${job.name}`;
              }).join('\n');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
